# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  #boot.kernelParams = [ "ip=dhcp" ];
  # boot.kernelParams = [ ];

  boot.initrd = {
    availableKernelModules = [ "vfat" "xhci_pci" "ehci_pci" "ahci" "usbhid" "ums_realtek" "usb_storage" "sd_mod" "ath9k" "r8169" "wireguard" ];
    kernelModules = [ ];

  #   # copy_bin_and_libs ${pkgs.wireguard-tools}/bin/wg-quick
  #   # copy_bin_and_libs ${pkgs.wireguard-tools}/bin/.wg-quick-wrapped
  #   # copy_bin_and_libs ${pkgs.bash}/bin/bash
  #   extraUtilsCommands = ''
  #     copy_bin_and_libs ${pkgs.wireguard-tools}/bin/wg
  #     copy_bin_and_libs ${pkgs.wireguard-tools}/bin/.wg-wrapped
  #     copy_bin_and_libs ${pkgs.wpa_supplicant}/bin/wpa_supplicant
  #     copy_bin_and_libs ${pkgs.wpa_supplicant}/bin/wpa_passphrase
  #     copy_bin_and_libs ${pkgs.wpa_supplicant}/bin/wpa_cli

  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo "aAaAaAaAaAaAaAaAaAaAaAaAaA"
  #     echo $out
  #     mkdir -p $out/etc
  #     ${pkgs.wpa_supplicant}/bin/wpa_passphrase "wifi ssid" "wifi pwd" > $out/etc/wpa_supplicant.conf
  #   '';

  #   network = {
  #     enable = true;
  #     flushBeforeStage2 = true;

  #     postCommands = ''
  #       wpa_supplicant -i wlp3s0 -c /etc/wpa_supplicant.conf
  #       
  #       ip link add dev wg0 type wireguard
  #       ip address add dev wg0 10.100.0.1/24
  #     '';

  #     # ssh = {
  #     #   enable = true;
  #     #   port = 2222;
  #     # };
  #   };

  #   # systemd = {
  #   #   enable = true;
  #   #   packages = [ "${pkgs.wireguard-tools}" ];
  #   #   emergencyAccess = true;
  #   # };
  };

  fileSystems."/" = { 
    device = "/dev/disk/by-uuid/03a9ad8c-8601-42f7-bf90-0edf2434b7ea";
    fsType = "btrfs";
    options = [ "subvol=@" ];
  };

  boot.initrd.luks.devices."luks-b4e7c50f-7263-49cf-8d28-24f8548985a2" = {
    device = "/dev/disk/by-uuid/b4e7c50f-7263-49cf-8d28-24f8548985a2";

    # wow, much hacky, very TODO
    preOpenCommands = ''
      mkdir -p /tmp/boot
      mount -t vfat /dev/disk/by-uuid/F1F3-4361 /tmp/boot
    '';
    keyFile = "/tmp/boot/keyfile";
    postOpenCommands = ''
      umount /tmp/boot
    '';

    fallbackToPassword = true;
    tryEmptyPassphrase = true;
    preLVM = false;
  };

  fileSystems."/boot" = { 
    device = "/dev/disk/by-uuid/F1F3-4361";
    fsType = "vfat";
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

  nixpkgs.config.allowUnfree = true;
  hardware.enableAllFirmware = true;
  hardware.enableRedistributableFirmware = true;

  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
